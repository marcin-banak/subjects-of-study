#lang plait
(define-type Prop
  (var [v : String])
  (conj [l : Prop] [r : Prop])
  (disj [l : Prop] [r : Prop])
  (neg [f : Prop]))

(define z1 (var "w"))
(define z2 (var "x"))
(define z3 (var "y"))
(define z4 (var "z"))
(define conj1 (conj (conj z1 z1) z2)) ; (z1 ^ z1) ^ z2
(define disj1 (disj conj1 z3)) ; ((z1 ^ z1) ^ z2) \/ z3
(define neg1 (neg z4)) ; ~z4
(define conj2 (conj neg1 disj1)) ; ~z4 ^ (((z1 ^ z1) ^ z2) \/ z3)

(define (remove-duplicates lst)
  (cond ((empty? lst) '())
        ((member (first lst) (rest lst))
         (remove-duplicates (rest lst)))
        (else (cons (first lst) (remove-duplicates (rest lst))))))

(define (free-vars p)
  (local [(define (it-vars [p : Prop])
           (cond [(var? p) (cons (var-v p) empty)]
                 [(conj? p) (append (it-vars (conj-l p)) (free-vars (conj-r p)))]
                 [(disj? p) (append (it-vars (disj-l p)) (free-vars (disj-r p)))]
                 [else (it-vars (neg-f p))]))]
    (remove-duplicates (it-vars p))))

(free-vars conj1)
(free-vars disj1)
(free-vars conj2)
;(free-vars "z")