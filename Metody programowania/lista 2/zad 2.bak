#lang racket

; fibonacci rekurencyjny
(define (fib n)
  (cond [(= n 0) 0]
        [(= n 1) 1]
        [else (+ (fib (- n 1)) (fib (- n 2)))]))

; fibonacci "iteracyjny"
(define (fib-iter n)
  (define (iter n res)
    (cond [(= n 0) res]
          [(= n 1) (+ res 1)]
          [else (+ (iter (- n 1) res) (iter (- n 2) res))]))
  (iter n 0))
                 