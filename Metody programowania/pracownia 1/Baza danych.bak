#lang racket

(define-struct table (schema rows) #:transparent)
(define-struct column-info (name type) #:transparent)

(define cities
   (table
     (list (column-info 'city 'string)
            (column-info 'country 'string)
            (column-info 'area 'number)
            (column-info 'capital 'boolean))
     (list (list "Wrocław" "Poland" 293 #f)
            (list "Warsaw" "Poland" 517 #t)
            (list "Poznan" "Poland" 262 #f)
            (list "Berlin" "Germany" 892 #t)
            (list "Munich" "Germany" 310 #f)
            (list "Paris" "France" 105 #t)
            (list "Rennes" "France" 50 #f))))

(define  (table-insert row tab)
  (define (equal-columns row tab)
    (if (equal? (length row) (length (table-schema tab)))
        #t
        (error "błędna ilość kolumn")))
  (define (it row info)
    (if (null? row)
        #t
        (cond [(equal? (column-info-type (first info)) 'number)
               (if (number? (first row))
                   (it (rest row) (rest info))
                   (error "niepoprawny typ"))]
              [(equal? (column-info-type (first info)) 'string)
               (if (string? (first row))
                   (it (rest row) (rest info))
                   (error "niepoprawny typ"))]
              [(equal? (column-info-type (first info)) 'symbol)
               (if (symbol? (first row))
                   (it (rest row) (rest info))
                   (error "niepoprawny typ"))]
              [(equal? (column-info-type (first info)) 'boolean)
               (if (boolean? (first row))
                   (it (rest row) (rest info))
                   (error "niepoprawny typ"))])))

  (if (and (equal-columns row tab) (it row (table-schema tab)))
      (table (table-schema tab) (cons row (table-rows tab)))
      tab))